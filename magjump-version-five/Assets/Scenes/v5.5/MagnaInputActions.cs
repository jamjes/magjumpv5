//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scenes/v5.5/MagnaInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MagnaInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MagnaInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MagnaInputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""834cf745-ae75-42c2-9b6f-b2e6d1338dd8"",
            ""actions"": [
                {
                    ""name"": ""Repulse"",
                    ""type"": ""Button"",
                    ""id"": ""239be44d-3fd7-4513-b501-654d2eebd360"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attract"",
                    ""type"": ""Button"",
                    ""id"": ""efb9ee53-1158-47e6-842e-df2585f8b296"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c01d2546-f900-4a47-875a-1637aa888bbb"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Repulse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb65d224-015f-44a2-9482-af35e14120e2"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Repulse = m_Default.FindAction("Repulse", throwIfNotFound: true);
        m_Default_Attract = m_Default.FindAction("Attract", throwIfNotFound: true);
    }

    ~@MagnaInputActions()
    {
        UnityEngine.Debug.Assert(!m_Default.enabled, "This will cause a leak and performance issues, MagnaInputActions.Default.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_Repulse;
    private readonly InputAction m_Default_Attract;
    public struct DefaultActions
    {
        private @MagnaInputActions m_Wrapper;
        public DefaultActions(@MagnaInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Repulse => m_Wrapper.m_Default_Repulse;
        public InputAction @Attract => m_Wrapper.m_Default_Attract;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @Repulse.started += instance.OnRepulse;
            @Repulse.performed += instance.OnRepulse;
            @Repulse.canceled += instance.OnRepulse;
            @Attract.started += instance.OnAttract;
            @Attract.performed += instance.OnAttract;
            @Attract.canceled += instance.OnAttract;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @Repulse.started -= instance.OnRepulse;
            @Repulse.performed -= instance.OnRepulse;
            @Repulse.canceled -= instance.OnRepulse;
            @Attract.started -= instance.OnAttract;
            @Attract.performed -= instance.OnAttract;
            @Attract.canceled -= instance.OnAttract;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnRepulse(InputAction.CallbackContext context);
        void OnAttract(InputAction.CallbackContext context);
    }
}
